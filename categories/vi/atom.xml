<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vi | Teracy's Blog]]></title>
  <link href="http://blog.teracy.com/categories/vi/atom.xml" rel="self"/>
  <link href="http://blog.teracy.com/"/>
  <updated>2016-08-08T08:07:38+00:00</updated>
  <id>http://blog.teracy.com/</id>
  <author>
    <name><![CDATA[Teracy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Những lỗi khi áp dụng khi mẫu thiết kế trải nghiệm người dùng (UX design patterns)]]></title>
    <link href="http://blog.teracy.com/2016/08/06/nhung-phien-ban-loi-khi-thiet-ke-giao-dien-ung-dung-di-dong/"/>
    <updated>2016-08-06T04:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/08/06/nhung-phien-ban-loi-khi-thiet-ke-giao-dien-ung-dung-di-dong</id>
    <content type="html"><![CDATA[<p>Nếu bạn là một nhà thiết kế có kinh nghiệm, bạn nên hiểu rằng trong  thiết kế giao diện người dùng <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> , việc lấy cảm hứng từ những sản phẩm của người khác không phải là ăn cắp ý tưởng mà là việc học hỏi những kinh nghiệm tốt nhất của những người đi trước, là sử dụng những mẫu thiết kế và làm theo các chỉ dẫn (guideline) nhằm đảm bảo sử dụng các kiểu mẫu quen thuộc và tạo nên các giao diện thực sự hữu ích cho người dùng.</p>

<p>Một số người nói rằng việc cứ bám theo các quy tắc cứng nhắc và bắt chước người khác thì sẽ giết chết sự sáng tạo và rồi cuối cùng mọi ứng dụng sẽ có thiết kế giống nhau. Theo quan điểm của của người thiết kế UX (trải nghiệm người dùng) tôi lại thấy một vấn đề khác. Việc quen áp dụng các cách khuyên dùng tốt nhất có thể khiến bạn tin rằng Google/Facebook/Instagram hay các ứng dụng khác luôn đúng, mục tiêu thiết kế của họ cũng giống của bạn nên bạn sẽ không bao giờ tự hỏi “có gì sai ở đây?!”. Để chứng minh điều này dưới đây là một số mẫu thiết kế (hoặc đã từng) được coi là những mẫu thiết kế tốt nhất nhưng rút cuộc nó lại không thực sự tốt như bạn nghĩ.</p>

<!-- more -->


<h3>1. Ẩn menu điều hướng <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3>

<p>Ít nhất cũng có đến nửa triệu bài báo chủ yếu được viết bởi các designer tranh cãi về menu dạng hamburger (☰) Nếu bạn đã bỏ lỡ chúng thì hãy đọc <a href="http://techcrunch.com/2014/05/24/before-the-hamburger-button-kills-you/">ở đây</a> và <a href="http://deep.design/the-hamburger-menu/">ở đây</a>. Các bài viết ấy thường không bàn cãi về việc sử dụng biểu tượng hamburger mà đó là về việc có nên ẩn các menu điều hướng và hiển thị nó khi người dùng nhấn vào biểu tượng hamburger.
Ban đầu thì việc ẩn hàng loạt menu điều hướng đăng sau nút hamburger này có vẻ như rất tiện lợi cho người thiết kế &ndash; bạn không phải lo lắng về việc màn hình bị chiếm diện tích bởi những menu cha con dài trên màn hình quá nhỏ của thiết bị di động, mọi thứ sẽ được ẩn một cách mặc định và chỉ hiện ra khi người dùng muốn.
Tuy nhiên các thực nghiệm lại chỉ ra rằng việc hiển thị menu điều hướng thường trực trên màn hình lại tăng khả năng tương tác giữa người dùng và ứng dụng, làm người dùng hài lòng hơn và thậm chí còn tăng doanh thu từ ứng dụng. Đó là lý do vì sao các ứng dụng lớn đang dần thay đồi bằng cách bỏ đi nút hamburger và quay lại hiển thị những tính năng hay được sử dụng ngay trên màn hình.</p>

<p><img class="center" src="/images/2016/08/06/youtube-nav-change.png" title="Menu điều hướng của Youtube" ></p>

<p style="text-align:center;"> Sự thay đổi menu điều hướng của Youtube &ndash; Luke Wroblewski</p>

<h3>2. Lạm dụng icon.</h3>

<p>Khi thiết kế trên màn hình nhỏ đôi lúc đôi lúc bạn quá lạm dụng việc thay thế các nhãn bằng các icon. Bạn có thể có nhiều lý do để dùng icon như chúng chiếm ít không gian hơn, bạn không phải lo lắng về việc màn hình bị xô lệch khi được dịch sang ngôn ngữ khác hay với ý nghĩ rằng người dùng đã rất quen với icon này rồi.</p>

<p>Với kiểu suy nghĩ như vậy các bảng thiết kế nhiều khi vô tình dấu đi các tính năng của chương trình đằng sau những icon khó hiểu hoặc đôi lúc mình cũng chẳng biết là cái gì nữa và dưới đây là một ví dụ:</p>

<p><img class="center" src="/images/2016/08/06/instagram-bad-icon.png" title="Icon khó hiểu của Instagram" ></p>

<p style="text-align:center;"> Liệu bạn có đoán được icon này trong Instagram là để gửi tin nhắn không!</p>

<p><img class="center" src="/images/2016/08/06/google-trans-bad-icon.png" title="Icon Khó hiểu trên Google Translate" ></p>

<p style="text-align:center;"> Hay icon này trong Google Translate dùng để làm gì?</p>

<p>Sẽ là sai lầm khi bạn nghĩ rằng người dùng đã quen với việc dùng những icon trừu tượng như thế này hay bá đạo hơn là nghĩ rằng họ sẽ tò mò mà bỏ thời gian ra tìm hiểu xem nó là cái gì.</p>

<p><img class="center" src="/images/2016/08/06/bloom-fm-bad-icon.png" title="Icon khó hiểu trong Bloom.fm" ></p>

<p style="text-align:center;"> Một số icon của Bloom.fm mà thật mình cũng chẳng hiểu nó dùng để làm gì!</p>

<p>Nếu bạn là người thiết kế một icon và bạn cảm thấy sản phẩm của mình cần nhãn để người khác có thể hiểu được thì sản phẩm của bạn thật sự có vấn đề, kể cả khi người dùng sẵn sàng thử để hiểu về nó.</p>

<p>Điều này không có nghĩa là bạn không nên dùng icon, thật sự thì có rất nhiều icon mà người dùng đã quen thuộc và phần lớn những chức năng quen thuộc của một ứng dụng đều đã có icon tương ứng ( tìm kiếm, phát video, email, cài đặt&hellip; ). Tuy vậy vẫn có nhiều icon khá là mơ hồ đối với người dùng vì mỗi ứng dụng sẽ có hành vi khác nhau một chút trên cùng một chức năng (ví dụ như sẽ có chuyện gì xảy ra nếu ta nhấn vào nút trái tim nhỉ (yêu thích, đánh dấu) ??? ).</p>

<p><img class="center" src="/images/2016/08/06/another-example-heart.png" title="đôi lúc thật khó để biết icon quen thuộc thật sự sẽ làm gì" ></p>

<p>Với những tính năng không quen thuộc và phức tạp thì bạn nên sử dụng icon kèm theo nhãn đầy đủ, nhãn sẽ giúp tính năng của bạn rõ ràng hơn và icon sẽ giúp người dùng nhận dạng tính năng nhanh hơn và đem lại một chút cá tính cho ứng dụng của bạn.</p>

<p><img class="center" src="/images/2016/08/06/complicate-action-should-have-label.png"></p>

<p style="text-align:center;"> Một ví dụ trong ứng dụng Pixelmator.</p>

<h3>3. Chuyển hướng dựa vào cử chỉ [^4]</h3>

<p>Khi Apple giới thiệu Iphone vào năm 2007, công nghệ cảm ứng đa điểm đã thu hút sự chú ý của ngưới dùng và họ thấy rằng không những có thể chạm và nhấn vào giao diện mà còn có thể phóng to, thu nhỏ và vuốt.</p>

<p>Tương tác dùng cảm ứng đã trở nên quen thuộc hơn với người thiết kế giao diện và đã có nhiều ứng dụng được thử nghiệm sử dụng nhận dạng cử chỉ đa điểm để tương tác.</p>

<p><img class="center" src="/images/2016/08/06/clear-app-gestures.jpg"></p>

<p style="text-align:center;"> Chuyển hướng dựa vào cử chỉ trong ứng dụng Clear.</p>

<p>Cũng giống như trường hợp giấu điều hướng và lạm dụng các icon thay vì dùng nhãn văn bản, đôi khi các nhà thiết kế cũng bị cuốn vào việc sử dụng cử chỉ để tiết kiệm không gian màn hình ( Một khi không có biểu tượng nào thể hiện việc bạn có thể vuốt sang trái để xóa thì người dùng chẳng có cách nào để biết là nó tồn tại ). Và cũng như vấn đề về hamburger menu, tính năng nào bị dấu đi thì sẽ ít người dùng nó. Thêm nữa là phần lớn nhận dạng cử chỉ chưa được chuẩn hóa trên các ứng dụng khác nhau, đơn cử là ứng dụng email nổi tiếng cũng hành xử khá là khác nhau đối với việc bạn vuốt sang phải trên mỗi email.</p>

<p><img class="center" src="/images/2016/08/06/apple-mail-gestures.png" title="vuốt sang phải trên Apple mail" ></p>

<p style="text-align:center;"> Với Apple mail vuốt sang phải sẽ hiện ra tùy chọn Đánh dấu chưa đọc.</p>

<p><img class="center" src="/images/2016/08/06/gmail-gestures.png" title="vuốt sang phải trên Gmail" ></p>

<p style="text-align:center;"> Trong khi đó với ứng dụng Gmail thì vuốt sang phải sẽ là chuyển email sang mục lưu trữ.</p>

<p>Vậy nên hãy nhớ rằng những tính năng sử dụng nhận dạng cử chỉ là tính năng ẩn và điều đó khiến cho người dùng mất nhiều công sức để ghi nhớ &ndash; có may mắn lắm thì bạn mới có thể dạy cho cả thế giới biết vuốt sang phải có nghĩa là gì.</p>

<h3>4. Giới thiệu tính năng mới trực quan trên màn hình cho người dùng mới</h3>

<p>Onboarding, đang là chủ đề nóng trong việc thiết kế giao diện. Tính năng này tự động chạy chỉ dùng một lần khi người dùng lần đầu tiên mở dụng dụng. Phần lớn tính năng này được dùng để giới thiệu và giải thích các tính năng của chương trình một cách trực quan trên màn hình:</p>

<p><img class="center" src="/images/2016/08/06/onboarding-overlay.png"></p>

<p style="text-align:center;"> Một ví dụ về Onboarding</p>

<p>Nhìn thì hay nhưng thật ra thì đây là một giải pháp khá tệ đấy. Bởi vì nhiều người đôi lúc sẽ bỏ qua phần giới thiệu của bạn, họ đang muốn sử dụng ứng dụng của bạn ngay cơ mà. Thậm chí nếu họ dành thời gian xem hướng dẫn của bạn thì họ cũng sẽ nhanh chóng quên mọi thứ ngay khi đóng cửa sổ hướng dẫn đó lại. (đặc biệt là với màn hình hướng dẫn có quá nhiều thông tin). Và cuối cùng là, nếu bạn phải giải thích giao diện của mình với người dùng thì điều đó đồng nghĩa rằng giao diện bạn đang có trên ứng dụng thật sự đang có vấn đề.</p>

<p><img class="center" src="/images/2016/08/06/ux-design-like-make-a-joke.jpg" title="Thiết kế giao diện giống như bạn đang kể truyện cười. Nếu bạn phải giải thích câu chuyện thì chẳng còn gì hay nữa." ></p>

<p style="text-align:center;"> Việc thiết kế giao diện giống như bạn đang kể truyện cười. Nếu bạn phải giải thích câu chuyện thì chẳng còn gì hay nữa.</p>

<p>Onboarding có thể được thiết kế theo nhiều cách khác nhau để trở nên hữu ích hơn đối với người dùng. Như với Slack, màn hình chào của họ tập trung việc giới thiệu khái quát về lợi ích mang lại hơn là giới thiệu chi tiết về các tính năng.</p>

<p><img class="center" src="/images/2016/08/06/slack-onboarding.png" title="Slack sử màn hình chào của họ tập trung việc giới thiệu khái quát về lợi ích mang lại hơn là giới thiệu chi tiết về các tính năng" ></p>

<p>Duolingo thì biến Onboarding thành các bài học và cổ vũ người dùng học các bài học đấy. Hướng tiếp cận này cũng giúp người dùng quen dần và hiểu hơn các tính năng/ giá trị của ứng dụng.</p>

<p><img class="center" src="/images/2016/08/06/duolingo-onboarding.jpg" title="Duolingo thì biến Onboarding thành các bài học và cổ vũ người dùng học các bài học đấy" ></p>

<p>Bạn còn nhớ vấn đề khác nhau giữa Mailbox và AppleMail khi dùng tính năng vuốt sang phải qua email? đây là cách hướng dẫn người dùng mới về tính năng đó: Người dùng sẽ cần xem những cử chỉ đó được thực hiện như thế nào/ở đâu trước khi thực sự bắt đầu sử dụng ứng dụng:</p>

<p><img class="center" src="/images/2016/08/06/apple-mail-onboarding-tutor.png"></p>

<p>Trước khi áp dụng rập khuôn sử dụng Onboarding bằng cách tạo một lớp trong suốt trên chính ứng dụng của mình để giới thiệu các tính năng và hướng dẫn cho người dùng mới, hãy nên dừng lại và thử nghĩ xem liệu người dùng nên được chào đón như thế nào cho hợp lý và bạn sẽ thấy có nhiều cách giải quyết khác hay hơn việc rập khuôn lại từ ứng dụng khác.
5. Sử dụng màn hình trống</p>

<p>Màn hình trống đôi lúc là một thứ dễ bị bỏ sót bởi các nhân viên thiết kế thiếu kinh nghiệm, tuy nhiên nó là một phần quan trong trong thiết kế ứng dụng của bạn.</p>

<p>Đôi khi bạn nghĩ rằng trang báo lỗi hay màn mình trống là cơ hội tốt để thể hiện tính sáng tạo của mình nhưng thực ra lại không như vậy.</p>

<p>Hãy xem ví dụ dưới đây của Google photos:</p>

<p><img class="center" src="/images/2016/08/06/gphoto-empty-state.png" title="Màn hình trống trên GPhoto" ></p>

<p>Nhìn qua thì có vẻ ổn nhưng hãy thử nhìn lại màn hình bạn sẽ thấy có một số vấn đề ở đây:</p>

<ul>
<li><p>Tại sao lại có nút tìm kiếm trong khi người dùng chưa tạo cái gì cả?</p></li>
<li><p>Tại sao hình ảnh chính trong màn hình này lại không có phản ứng gì khi tôi chạm vào?</p></li>
<li><p>Gợi ý ở màn hình trên bảo rằng &ldquo;bạn có thể tạo nội dung bằng cách sử dụng nút + ở phía trên màn hình&rdquo; và điều đó thật là vụng về, bản thân cái gợi ý ở trên nên tự bao gồm nút để tạo nội dung luôn nhỉ?</p></li>
</ul>


<p>Và như thế màn hình trống này không làm cho việc sử dụng ứng dụng dễ dàng hơn, nó không giúp người dùng hiểu rõ hơn về ứng dụng của bạn.</p>

<p>Màn hình trống sẽ làm mọi thứ dễ dàng hơn nếu nó thiết kế theo kiểu như dưới đây.</p>

<p><img class="center" src="/images/2016/08/06/empty-state-good-example.png" title="Một ví dụ về màn hình trống tốt" ></p>

<p>Đừng quên rằng màn hình trống (tương tự như các trang 404 trên web) không chỉ là nơi thể hiện khả năng sáng tạo và đặc tính thương hiệu mà còn có vai trò quan trọng hơn để thể hiện tính năng của chương trình. Vì vậy hãy làm cho màn hình trống trở nên trực quan hơn.</p>

<h3>5. Hãy luôn tự hỏi mọi thứ:</h3>

<p>Những điều tôi chia sẽ ở đây không phải là để chỉ trích các mẫu thiết kế hay các thực nghiệm tốt nhất. Hãy nhớ rằng các mẫu thiết kế trên các ứng dụng nổi tiếng đôi lúc có đối tượng người dùng khác với ứng dụng mà bạn tạo và điều đó có nghĩa rằng không có chìa khóa vàng chung cho tất cả mọi thứ. Vì thế hay tự nghiên cứu để tạo nên một thiết kế riêng cho mình, mọi thứ cần phải được đo đếm và kiểm thử để rút ra cách giải quyết tốt nhất cho ứng dụng của mình.</p>

<p>Lược dịch từ <a href="https://medium.com/@kollinz/misused-mobile-ux-patterns-84d2b6930570">https://medium.com/@kollinz/misused-mobile-ux-patterns-84d2b6930570</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>UI<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Navigation menu<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hoạt Động Team Building Đầu Tiên Của Teracy]]></title>
    <link href="http://blog.teracy.com/2014/09/24/hoat-dong-team-building-dau-tien-cua-teracy/"/>
    <updated>2014-09-24T15:46:00+00:00</updated>
    <id>http://blog.teracy.com/2014/09/24/hoat-dong-team-building-dau-tien-cua-teracy</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2014/09/teracy1.jpg"></p>

<p>Sau một năm làm việc vất vả thì cái ngày mong đợi cũng đã đến &ndash; một chuyến nghỉ mát 4 ngày 3 đêm
cùng Teracy. Chuyến đi lần này hướng về miền trung để đến với mảnh đất Đà Nẵng – một
thành phố tươi trẻ, năng động với bầu không khí trong lành đậm hương vị của biển khơi.</p>

<p>Đây không đơn giản chỉ là một kỳ nghỉ mát, đối với Teracy thì còn là một hoạt động team building. Do
Teracy vừa mới đi vào hoạt động chưa lâu, số thành viên còn khá ít ở ba miền Bắc &ndash; Trung &ndash; Nam, nên
chuyến đi này lại càng có ý nghĩa với tất cả các Teracier. Đây là lần đầu tiên tất cả các thành viên
được gặp mặt nhau, cùng trải qua những giây phút vui chơi, nghỉ ngơi bên nhau&hellip;Vì thế mà ai cũng háo
hức lắm :)</p>

<!-- more -->


<p>Hành trình nào cũng cần có sự chuẩn bị trước thật tốt để đảm bảo có một chuyến đi thật hoàn hảo. Cũng
như các hành trình khác, tôi gặp rất nhiều khó khăn và mất rất nhiều thời gian trong công tác chuẩn bị.</p>

<p>Khó khăn nhất là việc tìm điểm đến. Tưởng chừng công việc này đơn giản lắm, nhưng khi bắt tay
vào lên kế hoạch lại hoàn toàn ko đơn giản chút nào. Vì các thành viên của Teracy thì sinh sống ở
các miền khác nhau trong cả nước, do đó việc lựa chọn địa điểm làm sao phải thuận tiện cho việc
đi lại, phù hợp với ngân sách, có các hoạt động team building, có những danh lam thắng cảnh nổi
tiếng&hellip; Sau khi cân nhắc kỹ lưỡng, chúng tôi quyết định chọn Đà Nẵng, một bãi biển miền trung đầy
nắng và gió, một thành phố trẻ. Đà Nẵng cũng là điểm giữa của đất nước và có thể kết nối các thành
viên tại 3 miền Bắc Trung Nam.</p>

<p>Tiếp theo là book vé máy bay cho các thành viên và tìm kiếm khách sạn. Tiêu chí chọn khách sạn
của chúng tôi là phải thật sạch sẽ, tiện nghi, trung tâm những nơi sẽ đến thăm, giá cả hợp lý.
Tôi cũng cần tìm xem ở Đà Nẵng có những đặc sản gì, đi ăn gì, ở đâu và lên lịch trình chi tiết cho
chuyến đi nữa, cả đoàn sẽ đi thăm thắng cảnh nào, rồi sẽ chơi trò gì để tất cả mọi người đều có thể
tham gia và thấy thật sảng khoái&hellip;</p>

<p>Phù!!! cuối cùng thì mọi thứ cũng đã xong rồi. Chúng ta cùng tiến về Đà Nẵng nào!</p>

<p><strong>Hành trình 4 ngày 3 đêm bắt đầu!</strong></p>

<p><strong>Ngày đầu tiên:</strong></p>

<p>Khi bước xuống sân bay, vừa lúc chiều tối, tôi đã cảm nhận được mùi vị của
biển khơi, bầu không khí trong lành, mát mẻ, sự bình yên của thành phố, khác hẳn cảnh xô bồ đông
đúc, nóng nực của mùa hè ở chốn Hà Thành. Đúng 18h30, chúng tôi đến khách sạn, làm thủ tục
check-in, nghỉ ngơi và ngồi chuyện trò cùng tất cả các thành viên ở cả 3 miền. Lần đâu tiên hội tụ
các Teracier, (rất tiếc là chưa đông đủ) nhưng tất cả đều cảm thấy thật thân quen và gần gũi. Sau phút
giây gặp nhau chuyện trò không ngớt, những cái bụng bắt đầu sôi réo ầm ầm giục đi ăn tối rồi :).
Đến với thành phố biển, tất nhiên món ăn đầu tiên chúng tôi chọn là hải sản. Như đã lên kế hoạch
từ trước, chúng tôi vào một nhà hàng khá thoáng mát, sạch sẽ. Vừa ngồi vào bàn, một em nhân viên
phục vụ đã chạy đến niềm nở tươi cười, bảo chúng tôi gọi món. Ực! Ực! Nhìn thực đơn đã thấy ngon
lắm rồi. Ở Hà nội, làm gì kiếm được những món ngon, bổ, rẻ như thế này :) Lần lượt nào là cua rang me,
tôm hấp, ghẹ luộc&hellip;. được mang lên. Ngon quá, giờ nghĩ lại vẫn còn thèm lắm :) Sau khi ăn uống no
say rồi, cả đoàn cùng nhau đi dạo dọc bãi biển Mỹ Khê. Tiếng sóng rì rào của biển như đang ca hát
chào gọi chúng tôi. Làn gió biển mát rượi, hơi mằn mặn phả nhẹ vào mặt xua tan tất cả mệt mỏi
sau những ngày làm việc bận rộn. Gió cứ thổi, sóng cữ vỗ nhẹ vào những đôi chân trần, hòa quyện
trong tiếng cười nói vui nhộn của mọi người&hellip;.</p>

<p><strong>Ngày thứ 2:</strong></p>

<p>Quả thực đó là ngày không may mắn. Buổi sáng sau khi đi bán đảo Sơn Trà về thì
mọi người ngủ luôn đến chiều (chắc do tối qua thức khuya chơi bài), đến 15h giờ mới lục đục đi ăn
(chẳng hiểu là ăn trưa hay ăn tối nữa).Theo kế hoạch, sau khi ăn xong chúng tôi sẽ đi bắn súng sơn
nhưng bất ngờ trời lại đổ mưa nên không thể đi được (thế là kế hoạch đổ bể, đành chuyển sang đi tắm
biển). Buổi tối chúng tôi đi ăn thịt bê, khi lên taxi bảo họ chở đến địa chỉ của quán thứ nhất họ bảo
tên đường này mới nên khó tìm, đang thở phào vì có quán ăn dự phòng khác nhưng khi đến nơi thì
giật mình vì quán đã chuyển sang địa điểm khác. Chúng tôi đành chuyển sang ăn Bánh Tráng Thịt
Heo, ăn xong chúng tôi hí hửng bàn nhau đi chơi bowling để đổi gió đến nơi thì chán hẳn khi nhìn
thấy tấm biển ”tạm ngưng hoạt động để sửa chữa”. Không đổi được gió nên chúng tôi quay lại đi
“vòng quay mặt trời &ndash; vòng quay lớn thứ 4 trên thế giới”. May thay nó chưa bị đóng cửa.</p>

<p> Chùa Linh Ứng &ndash; Bán đảo Sơn Trà <img class="center" src="/images/2014/09/teracy2.jpg"></p>

<p><strong>Ngày thứ 3:</strong></p>

<p> May sao mọi hoạt động diễn ra theo đúng kế hoạch. Buổi sáng chúng tôi đi vượt
thác để thử sức mình trên những dòng nước chảy xiết, cùng với những chú đá đủ kích cỡ to nhỏ nằm
nghênh ngang giữa đường như thể làm chướng ngại vật tạo cho chúng tôi những cú hích bất ngờ
khiến trò chơi càng thêm phần mạo hiểm (trò chơi khá vui và thú vị mỗi tội sắc da có hơi chuyển
màu một chút).</p>

<p>Chuẩn bị vượt thác <img class="center" src="/images/2014/09/teracy3.jpg"></p>

<p>Chơi xong chúng tôi đi thưởng thức những đặc sản nơi đây (với món cá suối rán
giòn rụm, món gà rừng, lợn rừng thịt chắc nịch và món rau rừng xào có vị hơi chát chát khi ăn xong
còn để lại một dư vị khó tả). Buổi tối chúng tôi có những giây phút thật sự thoải mái ở bar Phương
Đông (đây là phương án 2 của chúng tôi vì không được vào bar Sky 36 do không mặc đúng trang
phục).</p>

<p>Hòa mình vào không khí sôi động tại bar Phương Đông<img class="center" src="/images/2014/09/teracy4.jpg"></p>

<p><strong>Ngày thứ 4:</strong></p>

<p>Buối sáng chúng tôi đi bắn súng sơn. Đây là trò chơi tập thể khá thú vị và còn được
mặc bộ quần áo như các chú bộ đội ấy, nhìn oai ghê cơ. Chúng tôi có 6 người, chia ra làm 2 đội. Tất
cả sẵn sàng chiến đấu nhé!</p>

<p>Sẵn sàng ra trận bắn súng sơn <img class="center" src="/images/2014/09/teracy5.jpg"></p>

<p>Sau khi &ldquo;ra trận&rdquo; về, chúng tôi trở về khách sạn, nghỉ ngơi, trả phòng rồi đến thăm nhà anh Phương &ndash;
1 đồng nghiệp đang sống ở Đà Nẵng. Còn đêm cuối cùng ở Đà Nẵng thôi, cả hội đều phải tận dụng
triệt để thời gian vàng bạc này để đi ăn các món đặc sản còn lại của Đà Nẵng và ngồi uống cafe,
ngắm thành phố đêm yên bình&hellip;</p>

<p>Sáng hôm sau mọi người đều dậy sớm, dọn đồ, tranh thủ đi mua quà cho người thân, rồi ra sân
bay. Tạm biệt Đà Nẵng nhé, tạm biệt các đồng nghiệp đang sống ở Đà Nẵng và Sài Gòn nhé. Trở về
Hà Nội sau chuyến đi này thấy nhớ Đà Nẵng ghê, nhớ các Terecier lắm, nhớ những phút giây cùng
các bạn vui cười bên nhau, nhớ tiếng sóng biển rì rầm, bờ cát trắng mìn, nhớ làn gió mằn mặn của
biển khơi, nhớ những buổi sáng trong lành tinh khôi, và đặc biệt là người dân Đà Nẵng cùng những
món ăn độc đáo nơi đây&hellip;</p>

<p>Mặc dù chuyến đi thực sự chưa thành công như mong đợi, nhưng nó đã giúp cho tập thể Teracy trở
nên thân thiết, gắn bó, hiểu nhau hơn và thêm yêu quý nhau hơn.</p>

<p>Hẹn gặp lại tất cả các Terecier năm sau nhá &ndash; trong hoạt động team building lần 2 của Teracy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cần chiến binh gia nhập đội phát triển]]></title>
    <link href="http://blog.teracy.com/2014/05/19/can-chien-binh-gia-nhap-doi-phat-trien/"/>
    <updated>2014-05-19T15:46:00+00:00</updated>
    <id>http://blog.teracy.com/2014/05/19/can-chien-binh-gia-nhap-doi-phat-trien</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2014/05/teracy_recruitment_poster.jpg"></p>

<p>Sau gần một năm startup, Teracy cần tìm &ldquo;chiến binh&rdquo; gia nhập đội phát triển.</p>

<p>Công việc sẽ là gia công phần mềm cho khách hàng, khách hàng hầu hết là các công ty Mỹ vì làm việc
với họ rất tốt.</p>

<p>Teracy có 2 mảng là gia công phần mềm và nghiên cứu phát triển, hiện tại tập trung phát triển mảng gia
công phần mềm trước để lấy ngắn (nguồn lực, vốn) nuôi dài (nghiên cứu, phát triển).</p>

<p>Về mảng nghiên cứu, phát triển bạn sẽ được tiếp cận dần dần, nhưng trước mắt bạn cần phải là chiến
binh để gia công phần mềm trước đã.</p>

<!-- more -->


<h2>Tại sao lại là chiến binh?</h2>

<ul>
<li><p>Vì bạn phải chiến đấu, tất nhiên là chiến đấu với những yêu cầu khá trừu tượng của khách hàng để
hoàn thành nhiệm vụ được giao (có sự trợ giúp và code review từ các đồng nghiệp)</p></li>
<li><p>Vì bạn sẽ phải chịu rất nhiều áp lực</p></li>
<li><p>Vì bạn không thể chọn làm những việc chỉ mình bạn thích, bạn cần làm cả những việc khách hàng yêu
cầu</p></li>
<li><p>Vì bạn sẽ phải làm nhiều việc khác nhau, cả sở trường lẫn sở đoản, sở đoản thì phải biến nó thành
sở trường trong thời gian ngắn (học kỹ năng mới)</p></li>
</ul>


<h2>Bạn cần gì?</h2>

<ul>
<li><p>1 chiếc laptop có thể làm việc được, ưu tiên Mac, Linux.</p></li>
<li><p>Có kết nối Internet</p></li>
<li><p>Cầu tiến, không bao giờ ngừng học hỏi</p></li>
<li><p>Có kỹ năng làm được việc (yêu cầu cụ thể bên dưới)</p></li>
<li><p>Làm việc nhóm tốt (nhận việc từ xa, giao tiếp từ xa.v.v&hellip;)</p></li>
</ul>


<h2>Những kỹ năng cần thiết?</h2>

<ul>
<li><p>Làm khá tốt với JavaScript là yêu cầu bắt buộc (Nắm rõ OOP, Scope, Closure, etc.)</p></li>
<li><p>Làm việc tốt với Git là yêu cầu bắt buộc (Bắt buộc sử dụng command line và biết sử dụng những lệnh
sau <a href="http://dev.teracy.org/docs/most_used_git_commands.html">http://dev.teracy.org/docs/most_used_git_commands.html</a>)</p></li>
<li><p>Tiếng Anh khá tốt là yêu cầu bắt buộc</p></li>
<li><p>Biết 1 chút mà muốn làm việc với Python là một lợi thế</p></li>
<li><p>Biết làm 1 chút HTML/CSS là một lợi thế</p></li>
<li><p>Tự quản lý thời gian của mình, không bó buộc không gian, thời gian làm việc miễn hoành thành
nhiệm vụ đã cam kết đúng thời hạn</p></li>
<li><p>Khiến khách hàng luôn hài lòng là ưu tiên hàng đầu (&ldquo;deliver more than you can promise.&rdquo;)</p></li>
</ul>


<h2>Ví dụ những công việc cụ thể điển hình?</h2>

<ul>
<li><p>Viết chrome extension hiện chỉ số cổ phiếu thay đổi theo thời gian 1 giây (dữ liệu giả do bạn
tạo và chạy ngẫu nhiên)</p></li>
<li><p>Viết Notify component và notify service cho reactjs dùng twitter bootstrap alert component,
viết trong 8h (với giả sử bạn chưa biết gì về reactjs)</p></li>
<li><p>Có 2 nút &ldquo;Next&rdquo; và &ldquo;Previous&rdquo; cho Image Slider, bình thường click vào những nút này sẽ hiển thị
ảnh tiếp theo hoặc trước đó. Yêu cầu là khi nhấn giữ chuột lâu các nút này thì các ảnh tự nhảy,
càng nhấn giữ lâu thì ảnh nhảy càng nhanh. (làm trong vòng 12h để tích hợp vào backbone
application hiện có)</p></li>
<li><p>Dùng CollectionView của Chaplin để quản lý các views trong backbone application</p></li>
<li><p>Fix failing tests of a Django application and improve it</p></li>
<li><p>Xây dựng gulp build system cho ứng dụng web để compile reactjs (.jsx) thành (.js), đóng gói ứng
dùng thành các bản phân phối cho chrome extension, web</p></li>
<li><p>Convert code HTML/CSS hiện có đang viết rất dở, dùng jquery-ui, chuyển sang dùng twitter bootstrap</p></li>
<li><p>2 way data-binding for backbone model and view</p></li>
<li><p>Bạn có 2 iframe trong 1 trang web, làm thế nào để truyền lệnh từ iframe này qua iframe kia?</p></li>
<li><p>Chọn 1 vùng hình chữ nhật trên 1 canvas và làm mở 1 phần được chọn đó.</p></li>
<li><p>Hãy implement eyedropper cho 1 canvas element?</p></li>
<li><p>Implement class <code>Settings</code> theo spec docs sau:</p></li>
</ul>


<p>```
  /<em>*
   * Settings class to support json deep model setting.
   *
   * For example:
   *
   * var settings = new Settings({
   *   env: &lsquo;dev&rsquo;,
   *   payment: {
   *     method: &lsquo;paypal&rsquo;
   *   }
   * });
   *
   * var env = settings.get(&lsquo;env&rsquo;);
   * var paymentMethod = settings.get(&lsquo;payment.method&rsquo;);
   *
   * settings.set(&lsquo;payment&rsquo;, {
   *   method: &lsquo;stripe&rsquo;,
   *   activated: false
   * }, true);
   *
   * var paymentActivated = settings.get(&lsquo;payment.activated&rsquo;);
   *
   * key must be valid javascript identifier and does not contain &ldquo;.&rdquo;.
   *
   * @constructor
   </em>/
  function Settings() {</p>

<pre><code>//TODO: implement this
</code></pre>

<p>  }</p>

<p>  //supported methods</p>

<p>  /<em>*
   * Gets setting by key, if the key does not exist:
   * + throw Error
   *
   * + If default def is provided and key does not exist, return def.
   *
   * @param key the specified key
   * @param def the default value if key is not found
   </em>/
  Settings.prototype.get = function(key, def) {</p>

<pre><code>//TODO: implement this
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Sets new key
   *
   * by default, does not allow overwrite existing key.
   *
   * if overwrite existing key without forcing, throw Error.
   *
   * @param key
   * @param value
   * @param force
   </em>/
  Settings.prototype.set = function(key, value, force) {</p>

<pre><code>//TODO: implement this
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Checks if a key is valid or not.
   *
   * key must be valid javascript identifier and does not contain &ldquo;.&rdquo;
   *
   * @param key
   </em>/
  Settings.prototype.isValidKey = function(key) {</p>

<pre><code>//TODO: implement this
</code></pre>

<p>  }
```</p>

<ul>
<li>Hãy implement <code>template</code> function theo spec docs sau:</li>
</ul>


<p>`&ldquo;
/**
 * Creates a compile template function to construct parsed string from string template and params object.
 *
 * var compileTemplate = template(strTemplate);
 * var parsedString = compileTemplate(params, [strict]);
 *
 * params is required otherwise error will be thrown.
 *
 * By default, strict is true and if there is any missing params key for strTemplate then
 * an error will be thrown.
 *
 * If params has unused keys in strTemplate, that keys will be ignored.
 *
 * If strict is false then parsedString will be returned with missing keys.
 *
 * Note: template key must match: \w+
 *
 * For example:
 *
 * var helloTemplate = template(&lsquo;Hello !&rsquo;),
 *     urlTemplate = template(&lsquo;//.json&rsquo;);
 *
 * var output = helloTemplate({name: &lsquo;World&rsquo;}); // => Hello World!
 *
 * helloTemplate(); // => error is thrown
 * helloTemplate({}); // => error is thrown
 *
 * var output2 = helloTemplate({}, false); // => Hello !
 *
 * var userUrl = urlTemplate({resource: &lsquo;users&rsquo;, id: 1}); // => /users/1.json
 *
 * var pricesTemplate = template(&lsquo;/prices?marketplace=&amp;&amp;num_results=&amp;&amp;since=&rsquo;, {
 *   defaults: {
 *     num_result: 80
 *   },
 *   processors: {
 *     since: function(processedStr, paramValue, params) {
 *       if (_.isUndefined(paramValue)) {
 *         processedStr = processStr.replace(&lsquo;&amp;&amp;since=&rsquo;, &rdquo;);
 *       }
 *       return processedStr;
 *     }
 *   }
 * });
 *
 * pricesTemplate({marketplace: &lsquo;mtgox&rsquo;}); => /prices/marketplace=mtgox&amp;&amp;num_results=80
 *
 * @param str the string template
 * @param options the optional options
 * @return a compiled template function
 */</p>

<p> function template(str, opts) {
  //TODO: implement this
 }
```</p>

<ul>
<li>v.v&hellip;</li>
</ul>


<h2>Bạn được những gì?</h2>

<ul>
<li><p>Lương cạnh tranh, nếu làm trung bình khá thì ít nhất 1 tháng bạn được trả $700/tháng (lương phụ
thuộc vào khả năng của bạn)</p></li>
<li><p>Có cơ hội góp vốn, cổ phần</p></li>
<li><p>Rèn luyện bản thân vì đây là công việc không phải dành cho tất cả mọi người, chỉ dành cho những
chiến binh và biết chiến đấu thật tốt</p></li>
<li><p>Được tham gia làm việc nhóm với nhiều loại công việc thú vị khác nhau</p></li>
<li><p>Có nhiều chế độ hỗ trợ thêm như: hỗ trợ bữa ăn (1 bữa với part-time, 2 bữa với full-time; hỗ trợ
và khuyến khích các hoạt động thể thao; hỗ trợ làm từ xa&hellip;)</p></li>
</ul>


<h2>Bạn ứng tuyển thế nào?</h2>

<p>Nhiều công việc thú vị, thử thách đang chờ bạn. Hãy liên lạc ngay với Teracy, mọi liên lạc hãy
gửi về: <strong>hr at teracy dot com</strong> với:</p>

<ul>
<li><p>1 bản CV đầy đủ của bạn</p></li>
<li><p>Bạn nghĩ gì về những công việc cụ thể điển hình trên?</p></li>
</ul>


<p>Cảm ơn bạn đã quan tâm!</p>
]]></content>
  </entry>
  
</feed>
